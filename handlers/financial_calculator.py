import datetime
from dateutil.relativedelta import relativedelta
from aiogram import types, Router, F, Bot
import re
from aiogram.filters import Command, or_f, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, FSInputFile, InputFile, BufferedInputFile
from aiogram.utils.formatting import as_list, as_marked_section, Bold, Italic, Text

from function.money_conversion import conversion
from keyboards import reply, inline_kb

import io

finance_router = Router()


@finance_router.message(F.text == '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üßÆ')
async def fin_cal(message: types.Message):
    preview = Bold('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç')
    await message.answer(preview.as_html(), reply_markup=reply.fin_cal.as_markup(resize_keyboard=True))


class Convert–µrMoney(StatesGroup):
    suma = State()
    id_val = State()
    id_val_wish = State()

    texts = {
        'Convert–µrMoney:suma': '–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ',
        'Convert–µrMoney:id_val': '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∑–∞–Ω–æ–≤–æ',
        'Convert–µrMoney:id_val_wish': '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏',
    }


#–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–Ω–∞ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@finance_router.message(StateFilter('*'), F.text.lower().contains("–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))
async def back_step_handler(message: types.Message, state: FSMContext) -> Message | None:
    current_state = await state.get_state()

    previous = None

    if current_state in Convert–µrMoney.__all_states__:
        for step in Convert–µrMoney.__all_states__:
            if step.state == current_state:
                info = f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n\n<b>{Convert–µrMoney.texts[previous.state]}</b>"
                await state.set_state(previous)

                match previous.state:
                    case Convert–µrMoney.suma:
                        await message.answer(f'{info}', reply_markup=reply.start_back.as_markup(resize_keyboard=True))

                    case Convert–µrMoney.id_val:
                        await message.answer(f'{info}', reply_markup=inline_kb.inline_money.as_markup())

                    case Convert–µrMoney.id_val_wish:
                        await message.answer(f'{info}', reply_markup=inline_kb.inline_money.as_markup())

                return
            previous = step


@finance_router.message(F.text == '–ö–æ–Ω–≤–µ–∫—Ç–æ—Ä –≤–∞–ª—é—Ç')
async def converter_1(message: types.Message, state: FSMContext):
    preview = Bold('–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Å—É–º–º—É:')

    await message.answer(preview.as_html(), reply_markup=reply.start_back.as_markup(resize_keyboard=True))
    await state.set_state(Convert–µrMoney.suma)


@finance_router.message(Convert–µrMoney.suma, F.text)
async def converter_2(message: types.Message, state: FSMContext):
    await state.update_data(suma=float(message.text))

    preview = Bold(f'–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ ‚û°Ô∏è')

    await message.answer(preview.as_html(), reply_markup=inline_kb.inline_money.as_markup())
    await state.set_state(Convert–µrMoney.id_val)


@finance_router.callback_query(StateFilter('*'), lambda c: c.data in ['byn', 'usd', 'eur', 'rub', 'cny', 'pln'])
async def converter_3(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    selected_currency = callback.data

    match current_state:

        case Convert–µrMoney.id_val:
            await state.update_data(id_val=selected_currency)

            preview = Bold(f'–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ ‚û°Ô∏è {selected_currency}\n–ü–µ—Ä–µ–≤–æ–¥ –≤ ‚û°Ô∏è')
            await callback.message.edit_text(preview.as_html(), reply_markup=inline_kb.inline_money.as_markup())
            await state.set_state(Convert–µrMoney.id_val_wish)

        case _:
            await state.update_data(id_val_wish=selected_currency)
            await callback.message.delete()
            data = await state.get_data()
            await callback.message.answer(
                f'–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ ‚û°Ô∏è {data['id_val']}\n–ü–µ—Ä–µ–≤–æ–¥ –≤ ‚û°Ô∏è {selected_currency}')

            res = conversion(data['suma'], data['id_val'], data['id_val_wish'])

            preview = f'–í–∞—à–∞ —Å—É–º–º–∞ - <b>{data['suma']} {data['id_val']}</b>\n–≠—Ç–æ - <b>{res} {data['id_val_wish']}</b>'
            await callback.message.answer(preview)


class Deposit(StatesGroup):
    suma = State()
    period = State()
    term = State()
    start_date = State()
    proc = State()
    par = State()
    res = State()
    n = State()
    k = State()


@finance_router.message(F.text == '–†–∞—Å—á—ë—Ç –≤–∫–ª–∞–¥–∞')
async def deposit_1(message: types.Message, state: FSMContext):
    preview = f'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∫–ª–∞–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000)'

    await message.answer(preview, reply_markup=reply.start_back.as_markup(resize_keyboard=True))
    await state.set_state(Deposit.suma)


@finance_router.message(Deposit.suma, F.text)
async def deposit_2(message: Message, state: FSMContext):
    try:
        suma = float(message.text)
    except ValueError:
        await message.answer('‚ùå –û—à–∏–±–∫–∞: –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∫–ª–∞–¥–∞ –∑–∞–Ω–æ–≤–æ')
        return

    if suma <= 0:
        await message.answer('‚ùå –û—à–∏–±–∫–∞: –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∫–ª–∞–¥–∞ –∑–∞–Ω–æ–≤–æ')
        return

    await state.update_data(suma=suma)
    preview = (f'–°—É–º–º–∞ –≤–∫–ª–∞–¥–∞: <b>{suma}</b>\n\n'
               f'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ä–æ–∫–∞:\n'
               f'‚ñ´Ô∏è –î–Ω–∏\n'
               f'‚ñ´Ô∏è –ú–µ—Å—è—Ü—ã\n'
               f'‚ñ´Ô∏è –ì–æ–¥—ã\n'
               )
    await message.answer(preview,
                         reply_markup=reply.period_kb_deposit.as_markup(resize_keyboard=True))
    await state.set_state(Deposit.period)


@finance_router.message(Deposit.period, F.text)
async def deposit_2(message: Message, state: FSMContext):
    if message.text not in ["–î–Ω–∏", "–ú–µ—Å—è—Ü—ã", "–ì–æ–¥—ã"]:
        await message.answer(
            '‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ä–æ–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ')
        return

    await state.update_data(period=message.text)

    match message.text.lower():
        case "–¥–Ω–∏":
            period = "–¥–Ω—è—Ö"
        case "–º–µ—Å—è—Ü—ã":
            period = "–º–µ—Å—è—Ü–∞—Ö"
        case "–≥–æ–¥—ã":
            period = "–≥–æ–¥–∞—Ö"

    await state.update_data(period=message.text)
    data = await state.get_data()
    preview = (
        f'–°—É–º–º–∞ –≤–∫–ª–∞–¥–∞: <b>{data["suma"]}</b>\n'
        f'–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ä–æ–∫–∞: <b>{data["period"]}</b>\n\n'
        f'‚è± –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤–∫–ª–∞–¥–∞ –≤ <b>{period}</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 13)')
    await message.answer(preview,
                         reply_markup=reply.start_back.as_markup(resize_keyboard=True))
    await state.set_state(Deposit.term)


@finance_router.message(Deposit.term, F.text)
async def deposit_3(message: Message, state: FSMContext):
    try:
        term = int(message.text)
    except ValueError:
        if '.' in message.text and message.text.replace(".",'').isdigit():
            await message.answer('‚ùå –û—à–∏–±–∫–∞: –í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤–∫–ª–∞–¥–∞ –∑–∞–Ω–æ–≤–æ')
            return
        await message.answer('‚ùå –û—à–∏–±–∫–∞: –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤–∫–ª–∞–¥–∞ –∑–∞–Ω–æ–≤–æ')
        return

    if term <= 0:
        await message.answer('‚ùå –û—à–∏–±–∫–∞: –°—Ä–æ–∫ –≤–∫–ª–∞–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤–∫–ª–∞–¥–∞ –∑–∞–Ω–æ–≤–æ')
        return

    await state.update_data(term=term)
    data = await state.get_data()

    preview = (
        f'–°—É–º–º–∞ –≤–∫–ª–∞–¥–∞: <b>{data["suma"]}</b>\n'
        f'–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ä–æ–∫–∞: <b>{data["period"]}</b>\n'
        f'–°—Ä–æ–∫ –≤–∫–ª–∞–¥–∞ : <b>{data["term"]}</b>\n\n'
        f'üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–∫–ª–∞–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì.–ú–ú.–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025.01.01)'
    )
    await message.answer(preview,
                         reply_markup=reply.start_back.as_markup(resize_keyboard=True))
    await state.set_state(Deposit.start_date)


@finance_router.message(Deposit.start_date, F.text)
async def deposit_3(message: Message, state: FSMContext):
    flag = re.search(r'\d{4}.[0-1]{1}[1-9]{1}.[0-3]{1}[0-9]{1}', message.text)
    if flag:
        b = list(map(int, message.text.split('.')))
        try:
            date = datetime.datetime(b[0], b[1], b[2])
        except ValueError:
            await message.answer(
                '‚ùå –û—à–∏–±–∫–∞: –î–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–∫–ª–∞–¥–∞ –∑–∞–Ω–æ–≤–æ')
            return
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –≤–∫–ª–∞–¥–∞\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–∫–ª–∞–¥–∞ –∑–∞–Ω–æ–≤–æ')
        return

    await state.update_data(start_date=date)
    data = await state.get_data()

    preview = (
        f'–°—É–º–º–∞ –≤–∫–ª–∞–¥–∞: <b>{data["suma"]}</b>\n'
        f'–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ä–æ–∫–∞: <b>{data["period"]}</b>\n'
        f'–°—Ä–æ–∫ –≤–∫–ª–∞–¥–∞ : <b>{data["term"]}</b>\n'
        f'–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞: <b>{data["start_date"].strftime("%Y.%m.%d")}</b>\n\n'
        f'üìà –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 13)'
    )

    await message.answer(preview,
                         reply_markup=reply.start_back.as_markup(resize_keyboard=True))
    await state.set_state(Deposit.proc)


@finance_router.message(Deposit.proc, F.text)
async def deposit_4(message: Message, state: FSMContext):
    try:
        proc = float(message.text)
    except ValueError:
        await message.answer('‚ùå –û—à–∏–±–∫–∞: –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –∑–∞–Ω–æ–≤–æ')
        return

    if proc <= 0:
        await message.answer(
            '‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è\n\n–í–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –∑–∞–Ω–æ–≤–æ')
        return

    await state.update_data(proc=proc)
    data = await state.get_data()

    preview = (
        f'–°—É–º–º–∞ –≤–∫–ª–∞–¥–∞: <b>{data["suma"]}</b>\n'
        f'–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ä–æ–∫–∞: <b>{data["period"]}</b>\n'
        f'–°—Ä–æ–∫ –≤–∫–ª–∞–¥–∞ : <b>{data["term"]}</b>\n'
        f'–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞: <b>{data["start_date"].strftime("%Y.%m.%d")}</b>\n'
        f'–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{data["proc"]}</b>\n\n'
        f'‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∫–ª–∞–¥–∞ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Ä–∞—Å—á—ë—Ç—É, –Ω–∞–∂–∞–≤ ¬´–ì–æ—Ç–æ–≤–æ¬ª'
    )

    await message.answer(preview,
                         reply_markup=reply.vklad_par.as_markup(resize_keyboard=True))
    await state.set_state(Deposit.par)


@finance_router.message(Deposit.par, F.text)
async def deposit_4(message: Message, state: FSMContext):
    data = await state.get_data()

    par_lst = data["par"] if data.get("par") else {}

    if par_lst.get("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"):
        if par_lst.get("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")[1] == -1 and par_lst.get("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")[0] != -1:
            par_lst["–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"] = [par_lst.get("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")[0], float(message.text)]

    match message.text:
        case "–ì–æ—Ç–æ–≤–æ":
            await state.set_state(Deposit.res)
            await deposit_5(message, state)
            return
        case "–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è":
            if "–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è" in par_lst:
                par_lst.pop("–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
            else:
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏",
                                     reply_markup=reply.period_capital.as_markup(resize_keyboard=True))
                par_lst["–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è"] = -1
        case "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
            if "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" in par_lst:
                par_lst.pop("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
            else:
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
                                     reply_markup=reply.period_capital.as_markup(resize_keyboard=True))
                par_lst["–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"] = [-1, -1]
        case _:
            pass

    await state.update_data(par=par_lst)

    if par_lst.get("–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è") and par_lst.get("–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è") == -1:
        if message.text == "–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è":
            return
        match message.text:
            case "–ï–∂–µ–º–µ—Å—è—á–Ω–æ":
                par_lst["–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è"] = "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
            case "–ï–∂–µ–≥–æ–¥–Ω–æ":
                par_lst["–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è"] = "–ï–∂–µ–≥–æ–¥–Ω–æ"

    elif par_lst.get("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ") and par_lst.get("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")[0] == -1:
        if message.text == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
            return
        match message.text:
            case "–ï–∂–µ–º–µ—Å—è—á–Ω–æ":
                par_lst["–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"] = ["–ï–∂–µ–º–µ—Å—è—á–Ω–æ", -1]
            case "–ï–∂–µ–≥–æ–¥–Ω–æ":
                par_lst["–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"] = ["–ï–∂–µ–≥–æ–¥–Ω–æ", -1]

        await state.update_data(par=par_lst)

        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω—è—Ç—å")
        return

    if par_lst:
        summary = '\n'.join(
            f"- {key} ({', '.join(map(str, value)) if isinstance(value, list) else value})" for key, value in
            par_lst.items())
        strform = (
            f'–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–æ:\n<b>{summary}</b>\n\n'
            f'‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∫–ª–∞–¥–∞ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Ä–∞—Å—á—ë—Ç—É, –Ω–∞–∂–∞–≤ ¬´–ì–æ—Ç–æ–≤–æ¬ª'
        )
    else:
        strform = (
            f'‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∫–ª–∞–¥–∞ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Ä–∞—Å—á—ë—Ç—É, –Ω–∞–∂–∞–≤ ¬´–ì–æ—Ç–æ–≤–æ¬ª'
        )

    preview = (
        f'–°—É–º–º–∞ –≤–∫–ª–∞–¥–∞: <b>{data["suma"]}</b>\n'
        f'–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ä–æ–∫–∞: <b>{data["period"]}</b>\n'
        f'–°—Ä–æ–∫ –≤–∫–ª–∞–¥–∞ : <b>{data["term"]}</b>\n'
        f'–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞: <b>{data["start_date"].strftime("%Y.%m.%d")}</b>\n'
        f'–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{data["proc"]}</b>\n\n'
        f'{strform}'
    )

    await state.update_data(par=par_lst)
    await message.answer(preview,
                         reply_markup=reply.vklad_par.as_markup(resize_keyboard=True))


@finance_router.message(Deposit.res)
async def deposit_5(message: Message, state: FSMContext):
    data = await state.get_data()
    match data["period"].lower():
        case "–¥–Ω–∏":
            term = data["term"] / 365
            time_delta = datetime.timedelta(days=data["term"])
        case "–º–µ—Å—è—Ü—ã":
            term = data["term"] / 12
            if data["term"] > 12:
                year = data["term"] // 12
                month = data["term"] - year * 12
                time_delta = relativedelta(years=year, months=month)
            else:
                time_delta = relativedelta(months=data["term"])
        case "–≥–æ–¥—ã":
            term = data["term"]
            time_delta = relativedelta(year=data["term"])

    if not data.get("par"):
        result = data['suma'] * (1 + (data['proc'] * term) / 100)

    else:
        if data["par"].get("–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è"):
            n = 12 if data["par"].get("–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è") == "–ï–∂–µ–º–µ—Å—è—á–Ω–æ" else 1
        if data["par"].get("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"):
            k = 12 if data["par"].get("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")[0] == "–ï–∂–µ–º–µ—Å—è—á–Ω–æ" else 1
            add_sum = data["par"].get("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")[1]
            dop_sum = add_sum * 12 * term
        if len(data["par"]) == 1:
            if "–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è" in data["par"]:
                result = data['suma'] * (1 + data['proc'] / (100 * n)) ** (n * term)
            elif "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" in data["par"]:
                result = (data['suma'] + add_sum * k * term + (data['suma'] + add_sum * (k * term + 1) / 2) * term * (
                            data['proc'] / 100))
            else:
                result = 0
        else:
            result = data['suma'] * (1 + data['proc'] / (100 * n)) ** (n * term) + add_sum * (
                        ((1 + data['proc'] / (100 * n)) ** (n * term) - 1) / (
                            (1 + data['proc'] / (100 * n)) ** (n / k) - 1))

    if data["par"].get("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"):
        ans = round(round(result, 2) - data["suma"] - dop_sum, 2)
    else:
        ans = round(round(result, 2) - data["suma"], 2)



    last_date = data["start_date"] + time_delta
    preview = (
        f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∫–ª–∞–¥–∞: <b>{data["start_date"].strftime("%Y.%m.%d")} - {last_date.strftime("%Y.%m.%d")}</b>\n\n'
        f'–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –≤—ã–¥–∞—á–µ: <b>{round(result, 2)}</b>\n'
        f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥: <b>{ans}</b>"

    )

    await message.answer(preview, reply_markup=reply.start_back.as_markup(resize_keyboard=True))
